import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

// Path to the server-side dist folder
const serverDistFolder = dirname(fileURLToPath(import.meta.url));

// Path to the browser-side dist folder (output from Angular build)
const browserDistFolder = resolve(serverDistFolder, '../browser');

// Create an Express app
const app = express();

// Create an instance of the Angular Node App Engine (SSR handler)
const angularApp = new AngularNodeAppEngine();

/**
 * Example of setting up custom Express REST API endpoints (Optional).
 * Uncomment and modify as needed.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Your API logic here
 * });
 * ```
 */

/**
 * Serve static files from the browser build folder (i.e., Angular build output)
 * These static assets include JS, CSS, and images, typically generated by the Angular build process.
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y', // Cache static assets for one year
    index: false, // Disable automatic serving of index.html
    redirect: false, // Prevent redirection
  })
);

/**
 * Handle all other requests by rendering the Angular application.
 * This is the fallback for routes that are not part of the static files.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)  // SSR handler to render the Angular app
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next()  // Write the SSR response to the Node.js response object
    )
    .catch(next);  // Catch errors and pass to the next middleware
});

/**
 * If this module is the entry point (main module), start the server.
 * The server listens on the PORT environment variable, defaulting to port 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * The request handler exported for use by Angular CLI during development or build.
 * This is used when running Angular SSR via the dev server.
 */
export const reqHandler = createNodeRequestHandler(app);
